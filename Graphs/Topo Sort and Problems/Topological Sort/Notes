In topological sorting, node u will always appear before node v if there is a directed edge from node u towards node v(u -> v).

This works only in DAG - Directed Acyclic Graphs

Case 1 (If the edges are undirected): 
If there is an undirected edge between node u and v, it signifies that there is an edge from node u to v(u -> v) as well as there is an edge from node v to u(v -> u). But according to the definition of topological sorting, it is practically impossible to write such ordering where u appears before v and v appears before u simultaneously. So, it is only possible for directed edges.

Case 2(If the directed graph contains a cycle):
If we try to get topological sorting of this cyclic graph, for edge 1->2, node 1 must appear before 2, for edge 2->3, node 2 must appear before 3, and for edge 3->1, node 3 must appear before 1 in the linear ordering. But such ordering is not possible as there exists a cyclic dependency in the graph. Thereby, topological sorting is only possible for a directed acyclic graph.

Use a stack to store the answers once the dfs for that node is completed.
If the dfs is complete for that node, then push it in the stack

Finally retrieve all the elements from the stack in the retrieved order to get the linear ordering.
This gives ONE OF THE ANSWERS for topo sort of a graph.

It is based on the dfs algorithm and the arrangement of elements in the adjacency list, the final answer may vary but the condition (node u will always appear before v if there is a directed edge from node u to node v) remains the same.

TC : O(V+E)
SC : O(N) + O(N) (one for visited and one for the stack)