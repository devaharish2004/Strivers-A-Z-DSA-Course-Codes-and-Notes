Previously, we have done the same question using DFS algorithm.
Now, we are going to solve the same question using BFS algorithm (Topo Sort - Implementation of Topo Sort)

In topo sort, we are dealing with indegrees.
Here, the terminal nodes are the ones with outdegrees = 0
Therfore, we can reverse the graph and find the nodes with indegrees = 0 - these are the terminal nodes.

We can start to traverse from the terminal nodes and apply the topo sort technique.

The algorithm steps are as follows:

First, we will reverse all the edges of the graph so that we can apply the topological sort algorithm afterward.
Then, we will calculate the indegree of each node and store it in the indegree array. We can iterate through the given adj list, and simply for every node u->v, we can increase the indegree of v by 1 in the indegree array. 
Then, we will push the node(s) with indegree 0 into the queue.
Then, we will pop a node from the queue including the node in our safeNodes array, and for all its adjacent nodes, we will decrease the indegree of that node by one. For example, if node u that has been popped out from the queue has an edge towards node v(u->v), we will decrease indegree[v] by 1.
After that, if for any node the indegree becomes 0, we will push that node again into the queue.
We will repeat steps 3 and 4 until the queue is completely empty. Finally, completing the BFS we will get the linear ordering of the nodes in the safeNodes array.
Finally, the safeNodes array will only consist of the nodes that are neither a part of any cycle nor connected to any cycle. Then we will sort the final safeNodes array as the question requires the answer in sorted order.

Time Complexity: O(V+E)+O(N*logN), where V = no. of nodes and E = no. of edges. This is a simple BFS algorithm. Extra O(N*logN) for sorting the safeNodes array, where N is the number of safe nodes.

Space Complexity: O(N) + O(N) + O(N) ~ O(3N), O(N) for the indegree array, O(N) for the queue data structure used in BFS(where N = no.of nodes), and extra O(N) for the adjacency list to store the graph in a reversed order.