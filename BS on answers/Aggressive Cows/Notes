Question :
You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible.
Example :
n=5 , k=3, stalls = [1 2 4 8 9]
Output: 3
Explanation:
The first cow can be placed at stalls[0], the second cow can be placed at stalls[2] and the third cow can be placed at stalls[3]. The minimum distance between cows, in this case, is 3, which also is the largest among all possible ways.

Solution :

This problem is different from the previous ones as we dealt with BS on 1D arrays, BS on answers (min or max). This is other pattern of BS where we will be finding min(max) or max(min).

We can try out many configurations to place exactly k cows.
For each configuration, we have to find out the minimum distance between two cows in that configuration. 
We have to find the maximum distance in those minimum distances as the answer.

Also, every configuration must be valid.

To find the minimum distance, we need to place the cows in consecutive stalls. Otherwise, there is no point in placing far away from each other as that will not give the minimum distance. 

If I place any two cows at i and j, then the distance between them is given by arr[j] - arr[i] (distance between the stalls).

Initially, we have to sort the array to find the consecutive stall distances and take the minimum out of them.

We can use greedy approach to find if it is possible or not. Also, we are not checking all the possible configurations here, just we will check out if for any minimum distance, it is possible to place all the cows or not.

Initially, let take the minimum distance between two cows to be 1.
It means that no two cows should be less than the minimum distance (as we have to find the max out of them).

Minimum distance 1 is possible. But, this value should be maximum.
So move to minimum distance = 2
Check if we can place the cows such that the minimum distance between the cows = 2
We are just checking if each of the cows is maintaining a minimum distance of 2.
If that is also possible, move to minimum distance = 3.
Whenever the distance between the two cows is less than the minimum distance, we cannot place that cow in that position and we have to move the cow to the next position in the array.

If it is possible to place all the cows with the minimum distance taken, then we can increase the minimum distance and try the same for a different minimum distance value.

We can observe that, this process goes till the minimum distance value 3 and after 3, we cannot place all the cows in the array.

This also means that, values after 3 will not be possible.

WE CAN OBSERVE THE PATTERN HERE - TILL A CERTAIN VALUE IT IS POSSIBLE AND AFTER THAT VALUE, IT IS NOT POSSIBLE. THIS IS WHY WE THINK OF A BINARY SEARCH HERE.
It is of the pattern min(max) or max(min).

We are also given that the cows value is always greater than 2. 

WHAT IS THE MAXIMUM DISTANCE THAT WE CAN GET BY PLACING 2 COWS ?
It is by placing the first cow at first store and second cow at last store.

Therfore, we figured out the range :
MINIMUM DISTANCE : 1
MAXIMUM DISTANCE : MAX-MIN

Brute Force :
Do a linear search between the given range and find out if that value of minimum distance will be possible or not. Call a function to compute if it is possible.

Inside the function, we run a loop till n to figure out how many cows are possible to place with the given minimum distance. If the count is less, return False. Else return True.

TC : O(max-min) * O(N)

OPTIMAL APPROACH :
We know the range and we have to find the maximum distance. So, instead of linearly searching the value, we can search using Binary Search. 
Same standard procedure to find the answer.
Here, initially high will point to the not possible area and after binary search, it will point to the possible area at the last.
Therefore, we return high as the answer.

TC : O(log(max-min)) * O(N)
