Question :
Given two sorted arrays, find the median of the array after merging the arrays and sorting the array.

Brute Force :
Use a two pointer approach to merge the array and find the median of the merged array.
TC : O(N1+N2)
SC : O(N1+N2)

Better approach : (Reducing the space complexity)
Instead of storing the entire merged array, we can keep track of the desired elements using a counter and based on the array size (even or odd) , we can determine the median of the array.
SC : Reduced to O(1)

Optimal approach : Binary Search
Why ? Since we know both the arrays are sorted, there can be a possibility of binary search.
We can learn with the examples :
Let arr1 = [ 1, 3, 4, 7, 10, 12 ] , arr2 = [ 2, 3, 6, 15]
The merged array will be arr = [ 1, 2, 3, 3, 4, 6, 7, 10, 12, 15 ] - The total no.of elements = 10
Split into two halves - binary search first step => Each subarray has 5 elements.
The thought process will be taking some number of elements from arr1 and taking the remaining ( 5 - number of elements from arr1 ) elements  and forming the first half of 5 elements. Then taking the remaining elements from both the arrays and forming the second half.
We can form as such :
Let number of elements from arr1 = k
Let k = 4. 
We can take from arr1 = [ 1, 3 ,4, 7 ] and arr2 = [2] as one half and [ 10, 12, 3, 6, 15 ] as the other half.
[1, 3, 4, 7]    |  [10,12]
              [2]    |  [3, 6, 15]
k = 3.
[ 1, 3, 4 ] | [7, 10, 12]
      [2, 3]  | [6, 15]
k = 2
[1, 3]      |  [4, 7, 10, 12]
[2, 3, 6]  |  [15]

We know that the elements left to the partition are always LESSER than the elements to the right of the partititon. So, we should check which can be the valid combination (i.e., we should check if the elements of the left portion that we considered are lesser than the right portion).
Also, here, we don't need to check in the same row as it is the same array that is already sorted (either arr1 or arr2).
So we should check for the diagonals and find if they are correct or not.
At k = 4,
7 <= 3 => False
2 <= 10 => True
So, we can conclude that we haven't separated them into correct partition.
At k = 2,
3 <= 15 => True
6 <= 4 => False
This is also not a correct partition.
At k = 3,
4 <= 6 and 3 <= 7 => BOTH ARE TRUE. So this will be our valid partition.
Before moving on to Binary Search, we will check how to find the median value with this example.
At k = 3,
Let left1 = 4, left2 = 3, right1 = 7, right2 = 6
If (left1 <= right2 && left2 <= right1) => This is a valid partition.
The partition will be left = [ 1, 2, 3, 3, 4 ] and right = [ 6, 7, 10, 12, 15 ]
Here, 4 is the max in the left half and 6 is the min in the right half. ( assume that for now we consider for only even length array).
So, max(left1, left2) + min(right1,right2) / 2  will be the median of the array.
How to perform binary search ? 
We can consider the value of k to be found using binary search as we should find WHERE THE PARTITION SHOULD BE. 
At k = 4, 7 <= 3 fails. In order to make this condition true, left portion should be decreased and right portion must be increased. Or we can say that move k value to the left to find values < 7. - remove elements from the left partition.
At k = 2,  3<= 15 is true, but 6 <= 4 fails. It means that we should increase the value of k. ( move to the right ).  - add up elements to the left partition. 
So, we can apply binary search on k to find where the partition is.
If we take all the 5 elements from one array itself, we will not have either any left or right variables. So, we have to initialize left with INT_MIN and right with INT_MAX (that's how they're supposed to be)
For even length arrays, every steps are same, except that the median formula will be = max(l1,l2)

DRY RUN :
arr1 = [7,12,14,15]
arr2 = [1,2,3,4,9,11]
low=0, high = arr1.size() -1 = 4, total length = n = 10 (
cut1 = 0+4 / 2 = 2, which means that taking two elements from arr1.
cut2 = 5 - cut1 = 5 - 2 = 3 elements from arr2.
Now left1 = 12, left2 = 3, right1 = 14, right2 = 4 (12 <= 4 - False) - decrease the left1 value. So move to the left (high = cut1-1)
low = 0, high = 1
cut1 = 0+1 / 2 = 0, which means no element from arr1.
cut2 = 5-cut1 = 5-0 = 5.
When we have no elements in left variables, take it as INT_MIN, and for right variables, take it as INT_MAX
left1 = INT_MIN, left2 = 9, right1 = 7, right2 = 11 (9 <= 7) - decrease the left2 value. So move to the right (low = cut1+1)
low = 1, high = 1
cut1 = 1, cut2 = 5-1 = 4
left1 = 7, left2 = 4, right1 = 12, right2 = 9 (7 <= 9 && 4 <= 12). => Valid Partition.
For even length, calculate using max(left1,left2)+min(right1,right2)/2;
For odd length, calculate using max(left1,left2) since we need only one element.
Always, left1 = arr1[cut1-1], left2 = arr2[cut2-1], right1 = arr1[cut1] and right2 = arr2[cut2]. But be careful of the edge case where we have to choose INT_MIN or INT_MAX for left and right respectively.
cut1 = low+high/2;
cut2 = (n1+n2)/2 - cut1 //assuming it is even length
For odd length array, where n1+n2 is odd (say 11), we can split into two halves ( 6 and 5 ).
If we say left partition has a length of 6, and we start the problem from there, it would be easy.
So, cut2 = (n1+n2+1)/2 - cut1 
The above should work for even length also. Ex : 5+6+1 = 12/2 = 6 && 5+5+1 = 11/2 = 5 (it works).
